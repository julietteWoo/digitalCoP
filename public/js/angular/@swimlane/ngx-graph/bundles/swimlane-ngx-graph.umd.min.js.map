{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@swimlane/ngx-graph/lib/utils/id.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/dagre.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/dagreCluster.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/dagreNodesOnly.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/d3ForceDirected.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/colaForceDirected.ts","ng://@swimlane/ngx-graph/lib/enums/panning.enum.ts","ng://@swimlane/ngx-graph/lib/enums/mini-map-position.enum.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/layout.service.ts","ng://@swimlane/ngx-graph/lib/utils/throttle.ts","ng://@swimlane/ngx-graph/lib/graph/graph.component.ts","ng://@swimlane/ngx-graph/lib/graph/mouse-wheel.directive.ts","ng://@swimlane/ngx-graph/lib/graph/graph.module.ts","ng://@swimlane/ngx-graph/lib/ngx-graph.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","Symbol","iterator","m","next","value","done","TypeError","__read","e","ar","push","error","__spread","concat","Orientation","Alignment","cache","id","newId","Math","random","pow","toString","slice","DagreLayout","defaultSettings","orientation","LEFT_TO_RIGHT","marginX","marginY","edgePadding","rankPadding","nodePadding","multigraph","compound","settings","run","graph","createDagreGraph","dagre.layout","dagreGraph","edgeLabels","_edgeLabels","dagreNodeId","dagreNode","this_1","_nodes","node","nodes","find","position","x","y","dimension","width","height","updateEdge","edge","sourceNode","source","targetNode","dir","startingPoint","endingPoint","points","dagre.graphlib","Graph","setGraph","rankdir","marginx","marginy","edgesep","ranksep","nodesep","align","acyclicer","ranker","setDefaultEdgeLabel","dagreNodes","map","dagreEdges","edges","l","newLink","_c","_d","setNode","_e","_f","setEdge","DagreClusterLayout","_this","dagreToOutput","clusters","dagreClusters","cluster","childNodeIds","forEach","childNodeId","setParent","_g","_h","_j","DagreNodesOnlyLayout","curveDistance","_b","rankAxis","orderAxis","rankDimension","_a","edgeLabelId","matchingEdgeLabel","toD3Node","maybeNode","D3ForceDirectedLayout","force","forceSimulation","forceManyBody","strength","forceCollide","forceLink","distance","outputGraph$","Subject","inputGraph","d3Graph","outputGraph","links","alpha","restart","on","d3GraphToOutputGraph","asObservable","transform","onDragStart","draggingNode","$event","alphaTarget","d3Node","draggingStart","fx","fy","onDrag","onDragEnd","undefined","toNode","nodeRef","PanningAxis","MiniMapPosition","ColaForceDirectedLayout","d3adaptor","d3Dispatch","d3Force","d3Timer","linkDistance","avoidOverlaps","viewDimensions","xOffset","internalGraph","groups","padding","nodeId","findIndex","filter","leaves","sourceNodeIndex","targetNodeIndex","groupLinks","onTickListener","internalGraphToOutputGraph","size","forceModifierFn","start","bounds","rayIntersection","cx","cy","groupLink","foundNode","foundGroup","group","index","inputGroup","nodeIndex","fixed","layouts","dagre","dagreCluster","dagreNodesOnly","d3ForceDirected","colaForceDirected","LayoutService","getLayout","name","Error","Injectable","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","now","remaining","clearTimeout","trailing","setTimeout","throttleable","duration","descriptor","configurable","enumerable","get","GraphComponent","el","zone","cd","layoutService","_super","legend","activeEntries","draggingEnabled","panningEnabled","panningAxis","Both","enableZoom","zoomSpeed","minZoomLevel","maxZoomLevel","autoZoom","panOnZoom","animate","autoCenter","enableTrackpadSupport","showMiniMap","miniMapMaxWidth","miniMapPosition","UpperRight","activate","EventEmitter","deactivate","zoomChange","clickHandler","isMouseMoveCalled","graphSubscription","Subscription","subscriptions","margin","results","isPanning","isDragging","initialized","graphDims","_oldLinks","oldNodes","Set","oldClusters","transformationMatrix","identity","_touchLastX","_touchLastY","minimapScaleCoefficient","minimapOffsetX","minimapOffsetY","isMinimapPanning","groupResultsBy","label","__","constructor","create","__extends","a","level","zoomTo","Number","panTo","f","ngOnInit","update$","subscribe","update","center$","center","zoomToFit$","zoomToFit","panToNode$","panToNodeId","minimapClipPathId","ngOnChanges","changes","layout","layoutSettings","setLayout","setLayoutSettings","ngOnDestroy","unsubscribe","ngAfterViewInit","curve","shape.curveBundle","beta","dims","calculateViewDimensions","margins","showLegend","seriesDomain","getSeriesDomain","setColors","legendOptions","getLegendOptions","createGraph","updateTransform","initializeNode","meta","forceDimensions","nodeWidth","nodeHeight","data","requestAnimationFrame","draw","applyNodeDimensions","result$","Observable","of","add","tick","pipe","first","color","colors","getColor","newLinks","edgeLabel","normKey","replace","isMultigraph","oldLink","ol","linkFromGraph","nl","JSON","stringify","oldLine","line","generateLine","updateMidpointOnEdge","textPos","floor","textTransform","textAngle","calcDominantBaseline","newL","updateMinimap","redrawLines","markForCheck","getMinimapTransform","UpperLeft","updateGraphDims","minX","Infinity","maxX","minY","maxY","miniMapMaxHeight","max","minimapTransform","nodeElements","elem","nativeElement","getBBox","ex","nodeMaxHeight","nodeMinHeight","min","getElementsByTagName","maxTextDims","currentBBox","nodeMaxWidth","nodeMinWidth","_animate","linkElements","linkEl","lin","select","attr","transition","ease","ease.easeSinInOut","chartElement","oldTextPath","textPath","link","firstPoint","lastPoint","dominantBaseline","reverse","shape\n            .line","lineFunction","onZoom","direction","ctrlKey","zoomFactor","newZoomLevel","zoomLevel","mouseX","clientX","mouseY","clientY","svg","chart","querySelector","svgGroup","point","createSVGPoint","svgPoint","matrixTransform","getScreenCTM","inverse","pan","zoom","deltaX","deltaY","ignoreZoomLevel","translate","isNaN","panX","panOffsetX","panY","panOffsetY","factor","scale","emit","event","movementX","movementY","this_2","redrawEdge","toSVG","smoothMatrix","onClick","onActivate","indexOf","entries","onDeactivate","idx","splice","reduce","sort","trackLinkBy","trackNodeBy","ColorHelper","scheme","customColors","scaleType","domain","onMouseMove","panWithConstraints","onMouseDown","graphClick","onTouchStart","changedTouches","onTouchMove","onTouchEnd","onMouseUp","onNodeMouseDown","onMinimapDragMouseDown","onMinimapPanTo","offsetX","offsetY","heightZoom","widthZoom","Horizontal","Vertical","midPoint","_first","_second","ElementRef","NgZone","ChangeDetectorRef","Input","Output","ContentChild","TemplateRef","ViewChild","ChartComponent","read","static","ViewChildren","QueryList","HostListener","MouseEvent","Component","selector","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","BaseChartComponent","MouseWheelDirective","mouseWheelUp","mouseWheelDown","onMouseWheelChrome","mouseWheelFunc","onMouseWheelFirefox","onWheel","onMouseWheelIE","window","delta","wheelDelta","detail","isWheelMouseUp","isWheelMouseDown","returnValue","preventDefault","Directive","GraphModule","NgModule","imports","ChartCommonModule","declarations","exports","providers","NgxGraphModule","NgxChartsModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","const cache = {};\n\n/**\n * Generates a short id.\n *\n */\nexport function id(): string {\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n\n  newId = `a${newId}`;\n\n  // ensure not already used\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { id } from '../../utils/id';\nimport * as dagre from 'dagre';\nimport { Edge } from '../../models/edge.model';\n\nexport enum Orientation {\n  LEFT_TO_RIGHT = 'LR',\n  RIGHT_TO_LEFT = 'RL',\n  TOP_TO_BOTTOM = 'TB',\n  BOTTOM_TO_TOM = 'BT'\n}\nexport enum Alignment {\n  CENTER = 'C',\n  UP_LEFT = 'UL',\n  UP_RIGHT = 'UR',\n  DOWN_LEFT = 'DL',\n  DOWN_RIGHT = 'DR'\n}\n\nexport interface DagreSettings {\n  orientation?: Orientation;\n  marginX?: number;\n  marginY?: number;\n  edgePadding?: number;\n  rankPadding?: number;\n  nodePadding?: number;\n  align?: Alignment;\n  acyclicer?: 'greedy' | undefined;\n  ranker?: 'network-simplex' | 'tight-tree' | 'longest-path';\n  multigraph?: boolean;\n  compound?: boolean;\n}\n\nexport class DagreLayout implements Layout {\n  defaultSettings: DagreSettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 20,\n    marginY: 20,\n    edgePadding: 100,\n    rankPadding: 100,\n    nodePadding: 50,\n    multigraph: true,\n    compound: true\n  };\n  settings: DagreSettings = {};\n\n  dagreGraph: any;\n  dagreNodes: any;\n  dagreEdges: any;\n\n  run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y\n      };\n      node.dimension = {\n        width: dagreNode.width,\n        height: dagreNode.height\n      };\n    }\n\n    return graph;\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n\n    // determine new arrow position\n    const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\n    const startingPoint = {\n      x: sourceNode.position.x,\n      y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\n    };\n    const endingPoint = {\n      x: targetNode.position.x,\n      y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\n    };\n\n    // generate new points\n    edge.points = [startingPoint, endingPoint];\n    return graph;\n  }\n\n  createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map(n => {\n      const node: any = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreEdges = graph.edges.map(l => {\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n      if (!node.height) {\n        node.height = 30;\n      }\n\n      // update dagre\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { id } from '../../utils/id';\nimport * as dagre from 'dagre';\nimport { Edge } from '../../models/edge.model';\nimport { Node, ClusterNode } from '../../models/node.model';\nimport { DagreSettings, Orientation } from './dagre';\n\nexport class DagreClusterLayout implements Layout {\n  defaultSettings: DagreSettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 20,\n    marginY: 20,\n    edgePadding: 100,\n    rankPadding: 100,\n    nodePadding: 50,\n    multigraph: true,\n    compound: true\n  };\n  settings: DagreSettings = {};\n\n  dagreGraph: any;\n  dagreNodes: Node[];\n  dagreClusters: ClusterNode[];\n  dagreEdges: any;\n\n  run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    const dagreToOutput = node => {\n      const dagreNode = this.dagreGraph._nodes[node.id];\n      return {\n        ...node,\n        position: {\n          x: dagreNode.x,\n          y: dagreNode.y\n        },\n        dimension: {\n          width: dagreNode.width,\n          height: dagreNode.height\n        }\n      };\n    };\n    graph.clusters = (graph.clusters || []).map(dagreToOutput);\n    graph.nodes = graph.nodes.map(dagreToOutput);\n\n    return graph;\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n\n    // determine new arrow position\n    const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\n    const startingPoint = {\n      x: sourceNode.position.x,\n      y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\n    };\n    const endingPoint = {\n      x: targetNode.position.x,\n      y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\n    };\n\n    // generate new points\n    edge.points = [startingPoint, endingPoint];\n    return graph;\n  }\n\n  createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map((n: Node) => {\n      const node: any = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreClusters = graph.clusters || [];\n\n    this.dagreEdges = graph.edges.map(l => {\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    for (const cluster of this.dagreClusters) {\n      this.dagreGraph.setNode(cluster.id, cluster);\n      cluster.childNodeIds.forEach(childNodeId => {\n        this.dagreGraph.setParent(childNodeId, cluster.id);\n      });\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { id } from '../../utils/id';\nimport * as dagre from 'dagre';\nimport { Edge } from '../../models/edge.model';\nimport { DagreSettings, Orientation } from './dagre';\n\nexport interface DagreNodesOnlySettings extends DagreSettings {\n  curveDistance?: number;\n}\n\nconst DEFAULT_EDGE_NAME = '\\x00';\nconst GRAPH_NODE = '\\x00';\nconst EDGE_KEY_DELIM = '\\x01';\n\nexport class DagreNodesOnlyLayout implements Layout {\n  defaultSettings: DagreNodesOnlySettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 20,\n    marginY: 20,\n    edgePadding: 100,\n    rankPadding: 100,\n    nodePadding: 50,\n    curveDistance: 20,\n    multigraph: true,\n    compound: true\n  };\n  settings: DagreNodesOnlySettings = {};\n\n  dagreGraph: any;\n  dagreNodes: any;\n  dagreEdges: any;\n\n  run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y\n      };\n      node.dimension = {\n        width: dagreNode.width,\n        height: dagreNode.height\n      };\n    }\n    for (const edge of graph.edges) {\n      this.updateEdge(graph, edge);\n    }\n\n    return graph;\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n    const rankAxis: 'x' | 'y' = this.settings.orientation === 'BT' || this.settings.orientation === 'TB' ? 'y' : 'x';\n    const orderAxis: 'x' | 'y' = rankAxis === 'y' ? 'x' : 'y';\n    const rankDimension = rankAxis === 'y' ? 'height' : 'width';\n    // determine new arrow position\n    const dir = sourceNode.position[rankAxis] <= targetNode.position[rankAxis] ? -1 : 1;\n    const startingPoint = {\n      [orderAxis]: sourceNode.position[orderAxis],\n      [rankAxis]: sourceNode.position[rankAxis] - dir * (sourceNode.dimension[rankDimension] / 2)\n    };\n    const endingPoint = {\n      [orderAxis]: targetNode.position[orderAxis],\n      [rankAxis]: targetNode.position[rankAxis] + dir * (targetNode.dimension[rankDimension] / 2)\n    };\n\n    const curveDistance = this.settings.curveDistance || this.defaultSettings.curveDistance;\n    // generate new points\n    edge.points = [\n      startingPoint,\n      {\n        [orderAxis]: startingPoint[orderAxis],\n        [rankAxis]: startingPoint[rankAxis] - dir * curveDistance\n      },\n      {\n        [orderAxis]: endingPoint[orderAxis],\n        [rankAxis]: endingPoint[rankAxis] + dir * curveDistance\n      },\n      endingPoint\n    ];\n    const edgeLabelId = `${edge.source}${EDGE_KEY_DELIM}${edge.target}${EDGE_KEY_DELIM}${DEFAULT_EDGE_NAME}`;\n    const matchingEdgeLabel = graph.edgeLabels[edgeLabelId];\n    if (matchingEdgeLabel) {\n      matchingEdgeLabel.points = edge.points;\n    }\n    return graph;\n  }\n\n  createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map(n => {\n      const node: any = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreEdges = graph.edges.map(l => {\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n      if (!node.height) {\n        node.height = 30;\n      }\n\n      // update dagre\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { Node } from '../../models/node.model';\nimport { id } from '../../utils/id';\nimport { forceCollide, forceLink, forceManyBody, forceSimulation } from 'd3-force';\nimport { Edge } from '../../models/edge.model';\nimport { Observable, Subject } from 'rxjs';\nimport { NodePosition } from '../../models';\n\nexport interface D3ForceDirectedSettings {\n  force?: any;\n  forceLink?: any;\n}\nexport interface D3Node {\n  id?: string;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  fx?: number;\n  fy?: number;\n}\nexport interface D3Edge {\n  source: string | D3Node;\n  target: string | D3Node;\n  midPoint: NodePosition;\n}\nexport interface D3Graph {\n  nodes: D3Node[];\n  edges: D3Edge[];\n}\nexport interface MergedNode extends D3Node, Node {\n  id: string;\n}\n\nexport function toD3Node(maybeNode: string | D3Node): D3Node {\n  if (typeof maybeNode === 'string') {\n    return {\n      id: maybeNode,\n      x: 0,\n      y: 0\n    };\n  }\n  return maybeNode;\n}\n\nexport class D3ForceDirectedLayout implements Layout {\n  defaultSettings: D3ForceDirectedSettings = {\n    force: forceSimulation<any>().force('charge', forceManyBody().strength(-150)).force('collide', forceCollide(5)),\n    forceLink: forceLink<any, any>()\n      .id(node => node.id)\n      .distance(() => 100)\n  };\n  settings: D3ForceDirectedSettings = {};\n\n  inputGraph: Graph;\n  outputGraph: Graph;\n  d3Graph: D3Graph;\n  outputGraph$: Subject<Graph> = new Subject();\n\n  draggingStart: { x: number; y: number };\n\n  run(graph: Graph): Observable<Graph> {\n    this.inputGraph = graph;\n    this.d3Graph = {\n      nodes: [...this.inputGraph.nodes.map(n => ({ ...n }))] as any,\n      edges: [...this.inputGraph.edges.map(e => ({ ...e }))] as any\n    };\n    this.outputGraph = {\n      nodes: [],\n      edges: [],\n      edgeLabels: []\n    };\n    this.outputGraph$.next(this.outputGraph);\n    this.settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (this.settings.force) {\n      this.settings.force\n        .nodes(this.d3Graph.nodes)\n        .force('link', this.settings.forceLink.links(this.d3Graph.edges))\n        .alpha(0.5)\n        .restart()\n        .on('tick', () => {\n          this.outputGraph$.next(this.d3GraphToOutputGraph(this.d3Graph));\n        });\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Observable<Graph> {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (settings.force) {\n      settings.force\n        .nodes(this.d3Graph.nodes)\n        .force('link', settings.forceLink.links(this.d3Graph.edges))\n        .alpha(0.5)\n        .restart()\n        .on('tick', () => {\n          this.outputGraph$.next(this.d3GraphToOutputGraph(this.d3Graph));\n        });\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  d3GraphToOutputGraph(d3Graph: D3Graph): Graph {\n    this.outputGraph.nodes = this.d3Graph.nodes.map((node: MergedNode) => ({\n      ...node,\n      id: node.id || id(),\n      position: {\n        x: node.x,\n        y: node.y\n      },\n      dimension: {\n        width: (node.dimension && node.dimension.width) || 20,\n        height: (node.dimension && node.dimension.height) || 20\n      },\n      transform: `translate(${node.x - ((node.dimension && node.dimension.width) || 20) / 2 || 0}, ${\n        node.y - ((node.dimension && node.dimension.height) || 20) / 2 || 0\n      })`\n    }));\n\n    this.outputGraph.edges = this.d3Graph.edges.map(edge => ({\n      ...edge,\n      source: toD3Node(edge.source).id,\n      target: toD3Node(edge.target).id,\n      points: [\n        {\n          x: toD3Node(edge.source).x,\n          y: toD3Node(edge.source).y\n        },\n        {\n          x: toD3Node(edge.target).x,\n          y: toD3Node(edge.target).y\n        }\n      ]\n    }));\n\n    this.outputGraph.edgeLabels = this.outputGraph.edges;\n    return this.outputGraph;\n  }\n\n  onDragStart(draggingNode: Node, $event: MouseEvent): void {\n    this.settings.force.alphaTarget(0.3).restart();\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n    if (!node) {\n      return;\n    }\n    this.draggingStart = { x: $event.x - node.x, y: $event.y - node.y };\n    node.fx = $event.x - this.draggingStart.x;\n    node.fy = $event.y - this.draggingStart.y;\n  }\n\n  onDrag(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n    if (!node) {\n      return;\n    }\n    node.fx = $event.x - this.draggingStart.x;\n    node.fy = $event.y - this.draggingStart.y;\n  }\n\n  onDragEnd(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n    if (!node) {\n      return;\n    }\n\n    this.settings.force.alphaTarget(0);\n    node.fx = undefined;\n    node.fy = undefined;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { Node, ClusterNode } from '../../models/node.model';\nimport { id } from '../../utils/id';\nimport { d3adaptor, ID3StyleLayoutAdaptor, Layout as ColaLayout, Group, InputNode, Link, Rectangle } from 'webcola';\nimport * as d3Dispatch from 'd3-dispatch';\nimport * as d3Force from 'd3-force';\nimport * as d3Timer from 'd3-timer';\nimport { Edge } from '../../models/edge.model';\nimport { Observable, Subject } from 'rxjs';\nimport { ViewDimensions } from '@swimlane/ngx-charts';\n\nexport interface ColaForceDirectedSettings {\n  force?: ColaLayout & ID3StyleLayoutAdaptor;\n  forceModifierFn?: (force: ColaLayout & ID3StyleLayoutAdaptor) => ColaLayout & ID3StyleLayoutAdaptor;\n  onTickListener?: (internalGraph: ColaGraph) => void;\n  viewDimensions?: ViewDimensions;\n}\nexport interface ColaGraph {\n  groups: Group[];\n  nodes: InputNode[];\n  links: Array<Link<number>>;\n}\nexport function toNode(nodes: InputNode[], nodeRef: InputNode | number): InputNode {\n  if (typeof nodeRef === 'number') {\n    return nodes[nodeRef];\n  }\n  return nodeRef;\n}\n\nexport class ColaForceDirectedLayout implements Layout {\n  defaultSettings: ColaForceDirectedSettings = {\n    force: d3adaptor({\n      ...d3Dispatch,\n      ...d3Force,\n      ...d3Timer\n    })\n      .linkDistance(150)\n      .avoidOverlaps(true),\n    viewDimensions: {\n      width: 600,\n      height: 600,\n      xOffset: 0\n    }\n  };\n  settings: ColaForceDirectedSettings = {};\n\n  inputGraph: Graph;\n  outputGraph: Graph;\n  internalGraph: ColaGraph & { groupLinks?: Edge[] };\n  outputGraph$: Subject<Graph> = new Subject();\n\n  draggingStart: { x: number; y: number };\n\n  run(graph: Graph): Observable<Graph> {\n    this.inputGraph = graph;\n    if (!this.inputGraph.clusters) {\n      this.inputGraph.clusters = [];\n    }\n    this.internalGraph = {\n      nodes: [\n        ...this.inputGraph.nodes.map(n => ({\n          ...n,\n          width: n.dimension ? n.dimension.width : 20,\n          height: n.dimension ? n.dimension.height : 20\n        }))\n      ] as any,\n      groups: [\n        ...this.inputGraph.clusters.map(\n          (cluster): Group => ({\n            padding: 5,\n            groups: cluster.childNodeIds\n              .map(nodeId => <any>this.inputGraph.clusters.findIndex(node => node.id === nodeId))\n              .filter(x => x >= 0),\n            leaves: cluster.childNodeIds\n              .map(nodeId => <any>this.inputGraph.nodes.findIndex(node => node.id === nodeId))\n              .filter(x => x >= 0)\n          })\n        )\n      ],\n      links: [\n        ...this.inputGraph.edges\n          .map(e => {\n            const sourceNodeIndex = this.inputGraph.nodes.findIndex(node => e.source === node.id);\n            const targetNodeIndex = this.inputGraph.nodes.findIndex(node => e.target === node.id);\n            if (sourceNodeIndex === -1 || targetNodeIndex === -1) {\n              return undefined;\n            }\n            return {\n              ...e,\n              source: sourceNodeIndex,\n              target: targetNodeIndex\n            };\n          })\n          .filter(x => !!x)\n      ] as any,\n      groupLinks: [\n        ...this.inputGraph.edges\n          .map(e => {\n            const sourceNodeIndex = this.inputGraph.nodes.findIndex(node => e.source === node.id);\n            const targetNodeIndex = this.inputGraph.nodes.findIndex(node => e.target === node.id);\n            if (sourceNodeIndex >= 0 && targetNodeIndex >= 0) {\n              return undefined;\n            }\n            return e;\n          })\n          .filter(x => !!x)\n      ]\n    };\n    this.outputGraph = {\n      nodes: [],\n      clusters: [],\n      edges: [],\n      edgeLabels: []\n    };\n    this.outputGraph$.next(this.outputGraph);\n    this.settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (this.settings.force) {\n      this.settings.force = this.settings.force\n        .nodes(this.internalGraph.nodes)\n        .groups(this.internalGraph.groups)\n        .links(this.internalGraph.links)\n        .alpha(0.5)\n        .on('tick', () => {\n          if (this.settings.onTickListener) {\n            this.settings.onTickListener(this.internalGraph);\n          }\n          this.outputGraph$.next(this.internalGraphToOutputGraph(this.internalGraph));\n        });\n      if (this.settings.viewDimensions) {\n        this.settings.force = this.settings.force.size([\n          this.settings.viewDimensions.width,\n          this.settings.viewDimensions.height\n        ]);\n      }\n      if (this.settings.forceModifierFn) {\n        this.settings.force = this.settings.forceModifierFn(this.settings.force);\n      }\n      this.settings.force.start();\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Observable<Graph> {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (settings.force) {\n      settings.force.start();\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  internalGraphToOutputGraph(internalGraph: any): Graph {\n    this.outputGraph.nodes = internalGraph.nodes.map(node => ({\n      ...node,\n      id: node.id || id(),\n      position: {\n        x: node.x,\n        y: node.y\n      },\n      dimension: {\n        width: (node.dimension && node.dimension.width) || 20,\n        height: (node.dimension && node.dimension.height) || 20\n      },\n      transform: `translate(${node.x - ((node.dimension && node.dimension.width) || 20) / 2 || 0}, ${\n        node.y - ((node.dimension && node.dimension.height) || 20) / 2 || 0\n      })`\n    }));\n\n    this.outputGraph.edges = internalGraph.links\n      .map(edge => {\n        const source: any = toNode(internalGraph.nodes, edge.source);\n        const target: any = toNode(internalGraph.nodes, edge.target);\n        return {\n          ...edge,\n          source: source.id,\n          target: target.id,\n          points: [\n            (source.bounds as Rectangle).rayIntersection(target.bounds.cx(), target.bounds.cy()),\n            (target.bounds as Rectangle).rayIntersection(source.bounds.cx(), source.bounds.cy())\n          ]\n        };\n      })\n      .concat(\n        internalGraph.groupLinks.map(groupLink => {\n          const sourceNode = internalGraph.nodes.find(foundNode => (foundNode as any).id === groupLink.source);\n          const targetNode = internalGraph.nodes.find(foundNode => (foundNode as any).id === groupLink.target);\n          const source =\n            sourceNode || internalGraph.groups.find(foundGroup => (foundGroup as any).id === groupLink.source);\n          const target =\n            targetNode || internalGraph.groups.find(foundGroup => (foundGroup as any).id === groupLink.target);\n          return {\n            ...groupLink,\n            source: source.id,\n            target: target.id,\n            points: [\n              (source.bounds as Rectangle).rayIntersection(target.bounds.cx(), target.bounds.cy()),\n              (target.bounds as Rectangle).rayIntersection(source.bounds.cx(), source.bounds.cy())\n            ]\n          };\n        })\n      );\n\n    this.outputGraph.clusters = internalGraph.groups.map(\n      (group, index): ClusterNode => {\n        const inputGroup = this.inputGraph.clusters[index];\n        return {\n          ...inputGroup,\n          dimension: {\n            width: group.bounds ? group.bounds.width() : 20,\n            height: group.bounds ? group.bounds.height() : 20\n          },\n          position: {\n            x: group.bounds ? group.bounds.x + group.bounds.width() / 2 : 0,\n            y: group.bounds ? group.bounds.y + group.bounds.height() / 2 : 0\n          }\n        };\n      }\n    );\n    this.outputGraph.edgeLabels = this.outputGraph.edges;\n    return this.outputGraph;\n  }\n\n  onDragStart(draggingNode: Node, $event: MouseEvent): void {\n    const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n    const node = this.internalGraph.nodes[nodeIndex];\n    if (!node) {\n      return;\n    }\n    this.draggingStart = { x: node.x - $event.x, y: node.y - $event.y };\n    node.fixed = 1;\n    this.settings.force.start();\n  }\n\n  onDrag(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n    const node = this.internalGraph.nodes[nodeIndex];\n    if (!node) {\n      return;\n    }\n    node.x = this.draggingStart.x + $event.x;\n    node.y = this.draggingStart.y + $event.y;\n  }\n\n  onDragEnd(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n    const node = this.internalGraph.nodes[nodeIndex];\n    if (!node) {\n      return;\n    }\n\n    node.fixed = 0;\n  }\n}\n","export enum PanningAxis {\n  Both = 'both',\n  Horizontal = 'horizontal',\n  Vertical = 'vertical'\n}\n","export enum MiniMapPosition {\n  UpperLeft = 'UpperLeft',\n  UpperRight = 'UpperRight'\n}\n","import { Injectable } from '@angular/core';\nimport { Layout } from '../../models/layout.model';\nimport { DagreLayout } from './dagre';\nimport { DagreClusterLayout } from './dagreCluster';\nimport { DagreNodesOnlyLayout } from './dagreNodesOnly';\nimport { D3ForceDirectedLayout } from './d3ForceDirected';\nimport { ColaForceDirectedLayout } from './colaForceDirected';\n\nconst layouts = {\n  dagre: DagreLayout,\n  dagreCluster: DagreClusterLayout,\n  dagreNodesOnly: DagreNodesOnlyLayout,\n  d3ForceDirected: D3ForceDirectedLayout,\n  colaForceDirected: ColaForceDirectedLayout\n};\n\n@Injectable()\nexport class LayoutService {\n  getLayout(name: string): Layout {\n    if (layouts[name]) {\n      return new layouts[name]();\n    } else {\n      throw new Error(`Unknown layout type '${name}'`);\n    }\n  }\n}\n","/**\n * Throttle a function\n *\n * @export\n * @param {*}      func\n * @param {number} wait\n * @param {*}      [options]\n * @returns\n */\nexport function throttle(func: any, wait: number, options?: any) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n *\n * @export\n * @param {number} duration\n * @param {*} [options]\n * @returns\n */\nexport function throttleable(duration: number, options?: any) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n\n        return this[key];\n      }\n    };\n  };\n}\n","// rename transition due to conflict with d3 transition\nimport { animate, style, transition as ngTransition, trigger } from '@angular/animations';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation,\n  NgZone,\n  ChangeDetectorRef,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport {\n  BaseChartComponent,\n  ChartComponent,\n  ColorHelper,\n  ViewDimensions,\n  calculateViewDimensions\n} from '@swimlane/ngx-charts';\nimport { select } from 'd3-selection';\nimport * as shape from 'd3-shape';\nimport * as ease from 'd3-ease';\nimport 'd3-transition';\nimport { Observable, Subscription, of } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { identity, scale, smoothMatrix, toSVG, transform, translate } from 'transformation-matrix';\nimport { Layout } from '../models/layout.model';\nimport { LayoutService } from './layouts/layout.service';\nimport { Edge } from '../models/edge.model';\nimport { Node, ClusterNode } from '../models/node.model';\nimport { Graph } from '../models/graph.model';\nimport { id } from '../utils/id';\nimport { PanningAxis } from '../enums/panning.enum';\nimport { MiniMapPosition } from '../enums/mini-map-position.enum';\nimport { throttleable } from '../utils/throttle';\n\n/**\n * Matrix\n */\nexport interface Matrix {\n  a: number;\n  b: number;\n  c: number;\n  d: number;\n  e: number;\n  f: number;\n}\n\n@Component({\n  selector: 'ngx-graph',\n  styleUrls: ['./graph.component.scss'],\n  templateUrl: 'graph.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GraphComponent extends BaseChartComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {\n  @Input() legend: boolean = false;\n  @Input() nodes: Node[] = [];\n  @Input() clusters: ClusterNode[] = [];\n  @Input() links: Edge[] = [];\n  @Input() activeEntries: any[] = [];\n  @Input() curve: any;\n  @Input() draggingEnabled = true;\n  @Input() nodeHeight: number;\n  @Input() nodeMaxHeight: number;\n  @Input() nodeMinHeight: number;\n  @Input() nodeWidth: number;\n  @Input() nodeMinWidth: number;\n  @Input() nodeMaxWidth: number;\n  @Input() panningEnabled: boolean = true;\n  @Input() panningAxis: PanningAxis = PanningAxis.Both;\n  @Input() enableZoom = true;\n  @Input() zoomSpeed = 0.1;\n  @Input() minZoomLevel = 0.1;\n  @Input() maxZoomLevel = 4.0;\n  @Input() autoZoom = false;\n  @Input() panOnZoom = true;\n  @Input() animate? = false;\n  @Input() autoCenter = false;\n  @Input() update$: Observable<any>;\n  @Input() center$: Observable<any>;\n  @Input() zoomToFit$: Observable<any>;\n  @Input() panToNode$: Observable<any>;\n  @Input() layout: string | Layout;\n  @Input() layoutSettings: any;\n  @Input() enableTrackpadSupport = false;\n  @Input() showMiniMap: boolean = false;\n  @Input() miniMapMaxWidth: number = 100;\n  @Input() miniMapMaxHeight: number;\n  @Input() miniMapPosition: MiniMapPosition = MiniMapPosition.UpperRight;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n  @Output() zoomChange: EventEmitter<number> = new EventEmitter();\n  @Output() clickHandler: EventEmitter<MouseEvent> = new EventEmitter();\n\n  @ContentChild('linkTemplate') linkTemplate: TemplateRef<any>;\n  @ContentChild('nodeTemplate') nodeTemplate: TemplateRef<any>;\n  @ContentChild('clusterTemplate') clusterTemplate: TemplateRef<any>;\n  @ContentChild('defsTemplate') defsTemplate: TemplateRef<any>;\n  @ContentChild('miniMapNodeTemplate') miniMapNodeTemplate: TemplateRef<any>;\n\n  @ViewChild(ChartComponent, { read: ElementRef, static: true }) chart: ElementRef;\n  @ViewChildren('nodeElement') nodeElements: QueryList<ElementRef>;\n  @ViewChildren('linkElement') linkElements: QueryList<ElementRef>;\n\n  private isMouseMoveCalled: boolean = false;\n\n  graphSubscription: Subscription = new Subscription();\n  subscriptions: Subscription[] = [];\n  colors: ColorHelper;\n  dims: ViewDimensions;\n  margin = [0, 0, 0, 0];\n  results = [];\n  seriesDomain: any;\n  transform: string;\n  legendOptions: any;\n  isPanning = false;\n  isDragging = false;\n  draggingNode: Node;\n  initialized = false;\n  graph: Graph;\n  graphDims: any = { width: 0, height: 0 };\n  _oldLinks: Edge[] = [];\n  oldNodes: Set<string> = new Set();\n  oldClusters: Set<string> = new Set();\n  transformationMatrix: Matrix = identity();\n  _touchLastX = null;\n  _touchLastY = null;\n  minimapScaleCoefficient: number = 3;\n  minimapTransform: string;\n  minimapOffsetX: number = 0;\n  minimapOffsetY: number = 0;\n  isMinimapPanning = false;\n  minimapClipPathId: string;\n\n  constructor(\n    private el: ElementRef,\n    public zone: NgZone,\n    public cd: ChangeDetectorRef,\n    private layoutService: LayoutService\n  ) {\n    super(el, zone, cd);\n  }\n\n  @Input()\n  groupResultsBy: (node: any) => string = node => node.label;\n\n  /**\n   * Get the current zoom level\n   */\n  get zoomLevel() {\n    return this.transformationMatrix.a;\n  }\n\n  /**\n   * Set the current zoom level\n   */\n  @Input('zoomLevel')\n  set zoomLevel(level) {\n    this.zoomTo(Number(level));\n  }\n\n  /**\n   * Get the current `x` position of the graph\n   */\n  get panOffsetX() {\n    return this.transformationMatrix.e;\n  }\n\n  /**\n   * Set the current `x` position of the graph\n   */\n  @Input('panOffsetX')\n  set panOffsetX(x) {\n    this.panTo(Number(x), null);\n  }\n\n  /**\n   * Get the current `y` position of the graph\n   */\n  get panOffsetY() {\n    return this.transformationMatrix.f;\n  }\n\n  /**\n   * Set the current `y` position of the graph\n   */\n  @Input('panOffsetY')\n  set panOffsetY(y) {\n    this.panTo(null, Number(y));\n  }\n\n  /**\n   * Angular lifecycle event\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  ngOnInit(): void {\n    if (this.update$) {\n      this.subscriptions.push(\n        this.update$.subscribe(() => {\n          this.update();\n        })\n      );\n    }\n\n    if (this.center$) {\n      this.subscriptions.push(\n        this.center$.subscribe(() => {\n          this.center();\n        })\n      );\n    }\n    if (this.zoomToFit$) {\n      this.subscriptions.push(\n        this.zoomToFit$.subscribe(() => {\n          this.zoomToFit();\n        })\n      );\n    }\n\n    if (this.panToNode$) {\n      this.subscriptions.push(\n        this.panToNode$.subscribe((nodeId: string) => {\n          this.panToNodeId(nodeId);\n        })\n      );\n    }\n\n    this.minimapClipPathId = `minimapClip${id()}`;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { layout, layoutSettings, nodes, clusters, links } = changes;\n    this.setLayout(this.layout);\n    if (layoutSettings) {\n      this.setLayoutSettings(this.layoutSettings);\n    }\n    this.update();\n  }\n\n  setLayout(layout: string | Layout): void {\n    this.initialized = false;\n    if (!layout) {\n      layout = 'dagre';\n    }\n    if (typeof layout === 'string') {\n      this.layout = this.layoutService.getLayout(layout);\n      this.setLayoutSettings(this.layoutSettings);\n    }\n  }\n\n  setLayoutSettings(settings: any): void {\n    if (this.layout && typeof this.layout !== 'string') {\n      this.layout.settings = settings;\n    }\n  }\n\n  /**\n   * Angular lifecycle event\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    for (const sub of this.subscriptions) {\n      sub.unsubscribe();\n    }\n    this.subscriptions = null;\n  }\n\n  /**\n   * Angular lifecycle event\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => this.update());\n  }\n\n  /**\n   * Base class update implementation for the dag graph\n   *\n   * @memberOf GraphComponent\n   */\n  update(): void {\n    super.update();\n    if (!this.curve) {\n      this.curve = shape.curveBundle.beta(1);\n    }\n\n    this.zone.run(() => {\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showLegend: this.legend\n      });\n\n      this.seriesDomain = this.getSeriesDomain();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n\n      this.createGraph();\n      this.updateTransform();\n      this.initialized = true;\n    });\n  }\n\n  /**\n   * Creates the dagre graph engine\n   *\n   * @memberOf GraphComponent\n   */\n  createGraph(): void {\n    this.graphSubscription.unsubscribe();\n    this.graphSubscription = new Subscription();\n    const initializeNode = (n: Node) => {\n      if (!n.meta) {\n        n.meta = {};\n      }\n      if (!n.id) {\n        n.id = id();\n      }\n      if (!n.dimension) {\n        n.dimension = {\n          width: this.nodeWidth ? this.nodeWidth : 30,\n          height: this.nodeHeight ? this.nodeHeight : 30\n        };\n        n.meta.forceDimensions = false;\n      } else {\n        n.meta.forceDimensions = n.meta.forceDimensions === undefined ? true : n.meta.forceDimensions;\n      }\n      n.position = {\n        x: 0,\n        y: 0\n      };\n      n.data = n.data ? n.data : {};\n      return n;\n    };\n\n    this.graph = {\n      nodes: this.nodes.length > 0 ? [...this.nodes].map(initializeNode) : [],\n      clusters: this.clusters && this.clusters.length > 0 ? [...this.clusters].map(initializeNode) : [],\n      edges:\n        this.links.length > 0\n          ? [...this.links].map(e => {\n              if (!e.id) {\n                e.id = id();\n              }\n              return e;\n            })\n          : []\n    };\n\n    requestAnimationFrame(() => this.draw());\n  }\n\n  /**\n   * Draws the graph using dagre layouts\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  draw(): void {\n    if (!this.layout || typeof this.layout === 'string') {\n      return;\n    }\n    // Calc view dims for the nodes\n    this.applyNodeDimensions();\n\n    // Recalc the layout\n    const result = this.layout.run(this.graph);\n    const result$ = result instanceof Observable ? result : of(result);\n    this.graphSubscription.add(\n      result$.subscribe(graph => {\n        this.graph = graph;\n        this.tick();\n      })\n    );\n\n    if (this.graph.nodes.length === 0) {\n      return;\n    }\n\n    result$.pipe(first()).subscribe(() => this.applyNodeDimensions());\n  }\n\n  tick() {\n    // Transposes view options to the node\n    const oldNodes: Set<string> = new Set();\n\n    this.graph.nodes.map(n => {\n      n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${\n        n.position.y - n.dimension.height / 2 || 0\n      })`;\n      if (!n.data) {\n        n.data = {};\n      }\n      n.data.color = this.colors.getColor(this.groupResultsBy(n));\n      oldNodes.add(n.id);\n    });\n\n    const oldClusters: Set<string> = new Set();\n\n    (this.graph.clusters || []).map(n => {\n      n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${\n        n.position.y - n.dimension.height / 2 || 0\n      })`;\n      if (!n.data) {\n        n.data = {};\n      }\n      n.data.color = this.colors.getColor(this.groupResultsBy(n));\n      oldClusters.add(n.id);\n    });\n\n    // Prevent animations on new nodes\n    setTimeout(() => {\n      this.oldNodes = oldNodes;\n      this.oldClusters = oldClusters;\n    }, 500);\n\n    // Update the labels to the new positions\n    const newLinks = [];\n    for (const edgeLabelId in this.graph.edgeLabels) {\n      const edgeLabel = this.graph.edgeLabels[edgeLabelId];\n\n      const normKey = edgeLabelId.replace(/[^\\w-]*/g, '');\n\n      const isMultigraph =\n        this.layout && typeof this.layout !== 'string' && this.layout.settings && this.layout.settings.multigraph;\n\n      let oldLink = isMultigraph\n        ? this._oldLinks.find(ol => `${ol.source}${ol.target}${ol.id}` === normKey)\n        : this._oldLinks.find(ol => `${ol.source}${ol.target}` === normKey);\n\n      const linkFromGraph = isMultigraph\n        ? this.graph.edges.find(nl => `${nl.source}${nl.target}${nl.id}` === normKey)\n        : this.graph.edges.find(nl => `${nl.source}${nl.target}` === normKey);\n\n      if (!oldLink) {\n        oldLink = linkFromGraph || edgeLabel;\n      } else if (\n        oldLink.data &&\n        linkFromGraph &&\n        linkFromGraph.data &&\n        JSON.stringify(oldLink.data) !== JSON.stringify(linkFromGraph.data)\n      ) {\n        // Compare old link to new link and replace if not equal\n        oldLink.data = linkFromGraph.data;\n      }\n\n      oldLink.oldLine = oldLink.line;\n\n      const points = edgeLabel.points;\n      const line = this.generateLine(points);\n\n      const newLink = Object.assign({}, oldLink);\n      newLink.line = line;\n      newLink.points = points;\n\n      this.updateMidpointOnEdge(newLink, points);\n\n      const textPos = points[Math.floor(points.length / 2)];\n      if (textPos) {\n        newLink.textTransform = `translate(${textPos.x || 0},${textPos.y || 0})`;\n      }\n\n      newLink.textAngle = 0;\n      if (!newLink.oldLine) {\n        newLink.oldLine = newLink.line;\n      }\n\n      this.calcDominantBaseline(newLink);\n      newLinks.push(newLink);\n    }\n\n    this.graph.edges = newLinks;\n\n    // Map the old links for animations\n    if (this.graph.edges) {\n      this._oldLinks = this.graph.edges.map(l => {\n        const newL = Object.assign({}, l);\n        newL.oldLine = l.line;\n        return newL;\n      });\n    }\n\n    this.updateMinimap();\n\n    if (this.autoZoom) {\n      this.zoomToFit();\n    }\n\n    if (this.autoCenter) {\n      // Auto-center when rendering\n      this.center();\n    }\n\n    requestAnimationFrame(() => this.redrawLines());\n    this.cd.markForCheck();\n  }\n\n  getMinimapTransform(): string {\n    switch (this.miniMapPosition) {\n      case MiniMapPosition.UpperLeft: {\n        return '';\n      }\n      case MiniMapPosition.UpperRight: {\n        return 'translate(' + (this.dims.width - this.graphDims.width / this.minimapScaleCoefficient) + ',' + 0 + ')';\n      }\n      default: {\n        return '';\n      }\n    }\n  }\n\n  updateGraphDims() {\n    let minX = +Infinity;\n    let maxX = -Infinity;\n    let minY = +Infinity;\n    let maxY = -Infinity;\n\n    for (let i = 0; i < this.graph.nodes.length; i++) {\n      const node = this.graph.nodes[i];\n      minX = node.position.x < minX ? node.position.x : minX;\n      minY = node.position.y < minY ? node.position.y : minY;\n      maxX = node.position.x + node.dimension.width > maxX ? node.position.x + node.dimension.width : maxX;\n      maxY = node.position.y + node.dimension.height > maxY ? node.position.y + node.dimension.height : maxY;\n    }\n    minX -= 100;\n    minY -= 100;\n    maxX += 100;\n    maxY += 100;\n    this.graphDims.width = maxX - minX;\n    this.graphDims.height = maxY - minY;\n    this.minimapOffsetX = minX;\n    this.minimapOffsetY = minY;\n  }\n\n  @throttleable(500)\n  updateMinimap() {\n    if (!this.showMiniMap) {\n      return;\n    }\n\n    // Calculate the height/width total, but only if we have any nodes\n    if (this.graph.nodes && this.graph.nodes.length) {\n      this.updateGraphDims();\n\n      if (this.miniMapMaxWidth) {\n        this.minimapScaleCoefficient = this.graphDims.width / this.miniMapMaxWidth;\n      }\n      if (this.miniMapMaxHeight) {\n        this.minimapScaleCoefficient = Math.max(\n          this.minimapScaleCoefficient,\n          this.graphDims.height / this.miniMapMaxHeight\n        );\n      }\n\n      this.minimapTransform = this.getMinimapTransform();\n    }\n  }\n\n  /**\n   * Measures the node element and applies the dimensions\n   *\n   * @memberOf GraphComponent\n   */\n  applyNodeDimensions(): void {\n    if (this.nodeElements && this.nodeElements.length) {\n      this.nodeElements.map(elem => {\n        const nativeElement = elem.nativeElement;\n        const node = this.graph.nodes.find(n => n.id === nativeElement.id);\n        if (!node) {\n          return;\n        }\n\n        // calculate the height\n        let dims;\n        try {\n          dims = nativeElement.getBBox();\n          if (!dims.width || !dims.height) {\n            return;\n          }\n        } catch (ex) {\n          // Skip drawing if element is not displayed - Firefox would throw an error here\n          return;\n        }\n        if (this.nodeHeight) {\n          node.dimension.height =\n            node.dimension.height && node.meta.forceDimensions ? node.dimension.height : this.nodeHeight;\n        } else {\n          node.dimension.height =\n            node.dimension.height && node.meta.forceDimensions ? node.dimension.height : dims.height;\n        }\n\n        if (this.nodeMaxHeight) {\n          node.dimension.height = Math.max(node.dimension.height, this.nodeMaxHeight);\n        }\n        if (this.nodeMinHeight) {\n          node.dimension.height = Math.min(node.dimension.height, this.nodeMinHeight);\n        }\n\n        if (this.nodeWidth) {\n          node.dimension.width =\n            node.dimension.width && node.meta.forceDimensions ? node.dimension.width : this.nodeWidth;\n        } else {\n          // calculate the width\n          if (nativeElement.getElementsByTagName('text').length) {\n            let maxTextDims;\n            try {\n              for (const textElem of nativeElement.getElementsByTagName('text')) {\n                const currentBBox = textElem.getBBox();\n                if (!maxTextDims) {\n                  maxTextDims = currentBBox;\n                } else {\n                  if (currentBBox.width > maxTextDims.width) {\n                    maxTextDims.width = currentBBox.width;\n                  }\n                  if (currentBBox.height > maxTextDims.height) {\n                    maxTextDims.height = currentBBox.height;\n                  }\n                }\n              }\n            } catch (ex) {\n              // Skip drawing if element is not displayed - Firefox would throw an error here\n              return;\n            }\n            node.dimension.width =\n              node.dimension.width && node.meta.forceDimensions ? node.dimension.width : maxTextDims.width + 20;\n          } else {\n            node.dimension.width =\n              node.dimension.width && node.meta.forceDimensions ? node.dimension.width : dims.width;\n          }\n        }\n\n        if (this.nodeMaxWidth) {\n          node.dimension.width = Math.max(node.dimension.width, this.nodeMaxWidth);\n        }\n        if (this.nodeMinWidth) {\n          node.dimension.width = Math.min(node.dimension.width, this.nodeMinWidth);\n        }\n      });\n    }\n  }\n\n  /**\n   * Redraws the lines when dragged or viewport updated\n   *\n   * @memberOf GraphComponent\n   */\n  redrawLines(_animate = this.animate): void {\n    this.linkElements.map(linkEl => {\n      const edge = this.graph.edges.find(lin => lin.id === linkEl.nativeElement.id);\n\n      if (edge) {\n        const linkSelection = select(linkEl.nativeElement).select('.line');\n        linkSelection\n          .attr('d', edge.oldLine)\n          .transition()\n          .ease(ease.easeSinInOut)\n          .duration(_animate ? 500 : 0)\n          .attr('d', edge.line);\n\n        const textPathSelection = select(this.chartElement.nativeElement).select(`#${edge.id}`);\n        textPathSelection\n          .attr('d', edge.oldTextPath)\n          .transition()\n          .ease(ease.easeSinInOut)\n          .duration(_animate ? 500 : 0)\n          .attr('d', edge.textPath);\n\n        this.updateMidpointOnEdge(edge, edge.points);\n      }\n    });\n  }\n\n  /**\n   * Calculate the text directions / flipping\n   *\n   * @memberOf GraphComponent\n   */\n  calcDominantBaseline(link): void {\n    const firstPoint = link.points[0];\n    const lastPoint = link.points[link.points.length - 1];\n    link.oldTextPath = link.textPath;\n\n    if (lastPoint.x < firstPoint.x) {\n      link.dominantBaseline = 'text-before-edge';\n\n      // reverse text path for when its flipped upside down\n      link.textPath = this.generateLine([...link.points].reverse());\n    } else {\n      link.dominantBaseline = 'text-after-edge';\n      link.textPath = link.line;\n    }\n  }\n\n  /**\n   * Generate the new line path\n   *\n   * @memberOf GraphComponent\n   */\n  generateLine(points: any): any {\n    const lineFunction = shape\n      .line<any>()\n      .x(d => d.x)\n      .y(d => d.y)\n      .curve(this.curve);\n    return lineFunction(points);\n  }\n\n  /**\n   * Zoom was invoked from event\n   *\n   * @memberOf GraphComponent\n   */\n  onZoom($event: WheelEvent, direction): void {\n    if (this.enableTrackpadSupport && !$event.ctrlKey) {\n      this.pan($event.deltaX * -1, $event.deltaY * -1);\n      return;\n    }\n\n    const zoomFactor = 1 + (direction === 'in' ? this.zoomSpeed : -this.zoomSpeed);\n\n    // Check that zooming wouldn't put us out of bounds\n    const newZoomLevel = this.zoomLevel * zoomFactor;\n    if (newZoomLevel <= this.minZoomLevel || newZoomLevel >= this.maxZoomLevel) {\n      return;\n    }\n\n    // Check if zooming is enabled or not\n    if (!this.enableZoom) {\n      return;\n    }\n\n    if (this.panOnZoom === true && $event) {\n      // Absolute mouse X/Y on the screen\n      const mouseX = $event.clientX;\n      const mouseY = $event.clientY;\n\n      // Transform the mouse X/Y into a SVG X/Y\n      const svg = this.chart.nativeElement.querySelector('svg');\n      const svgGroup = svg.querySelector('g.chart');\n\n      const point = svg.createSVGPoint();\n      point.x = mouseX;\n      point.y = mouseY;\n      const svgPoint = point.matrixTransform(svgGroup.getScreenCTM().inverse());\n\n      // Panzoom\n      this.pan(svgPoint.x, svgPoint.y, true);\n      this.zoom(zoomFactor);\n      this.pan(-svgPoint.x, -svgPoint.y, true);\n    } else {\n      this.zoom(zoomFactor);\n    }\n  }\n\n  /**\n   * Pan by x/y\n   *\n   * @param x\n   * @param y\n   */\n  pan(x: number, y: number, ignoreZoomLevel: boolean = false): void {\n    const zoomLevel = ignoreZoomLevel ? 1 : this.zoomLevel;\n    this.transformationMatrix = transform(this.transformationMatrix, translate(x / zoomLevel, y / zoomLevel));\n\n    this.updateTransform();\n  }\n\n  /**\n   * Pan to a fixed x/y\n   *\n   */\n  panTo(x: number, y: number): void {\n    if (x === null || x === undefined || isNaN(x) || y === null || y === undefined || isNaN(y)) {\n      return;\n    }\n\n    const panX = -this.panOffsetX - x * this.zoomLevel + this.dims.width / 2;\n    const panY = -this.panOffsetY - y * this.zoomLevel + this.dims.height / 2;\n\n    this.transformationMatrix = transform(\n      this.transformationMatrix,\n      translate(panX / this.zoomLevel, panY / this.zoomLevel)\n    );\n\n    this.updateTransform();\n  }\n\n  /**\n   * Zoom by a factor\n   *\n   */\n  zoom(factor: number): void {\n    this.transformationMatrix = transform(this.transformationMatrix, scale(factor, factor));\n    this.zoomChange.emit(this.zoomLevel);\n    this.updateTransform();\n  }\n\n  /**\n   * Zoom to a fixed level\n   *\n   */\n  zoomTo(level: number): void {\n    this.transformationMatrix.a = isNaN(level) ? this.transformationMatrix.a : Number(level);\n    this.transformationMatrix.d = isNaN(level) ? this.transformationMatrix.d : Number(level);\n    this.zoomChange.emit(this.zoomLevel);\n    this.updateTransform();\n    this.update();\n  }\n\n  /**\n   * Drag was invoked from an event\n   *\n   * @memberOf GraphComponent\n   */\n  onDrag(event: MouseEvent): void {\n    if (!this.draggingEnabled) {\n      return;\n    }\n    const node = this.draggingNode;\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDrag) {\n      this.layout.onDrag(node, event);\n    }\n\n    node.position.x += event.movementX / this.zoomLevel;\n    node.position.y += event.movementY / this.zoomLevel;\n\n    // move the node\n    const x = node.position.x - node.dimension.width / 2;\n    const y = node.position.y - node.dimension.height / 2;\n    node.transform = `translate(${x}, ${y})`;\n\n    for (const link of this.graph.edges) {\n      if (\n        link.target === node.id ||\n        link.source === node.id ||\n        (link.target as any).id === node.id ||\n        (link.source as any).id === node.id\n      ) {\n        if (this.layout && typeof this.layout !== 'string') {\n          const result = this.layout.updateEdge(this.graph, link);\n          const result$ = result instanceof Observable ? result : of(result);\n          this.graphSubscription.add(\n            result$.subscribe(graph => {\n              this.graph = graph;\n              this.redrawEdge(link);\n            })\n          );\n        }\n      }\n    }\n\n    this.redrawLines(false);\n    this.updateMinimap();\n  }\n\n  redrawEdge(edge: Edge) {\n    const line = this.generateLine(edge.points);\n    this.calcDominantBaseline(edge);\n    edge.oldLine = edge.line;\n    edge.line = line;\n  }\n\n  /**\n   * Update the entire view for the new pan position\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  updateTransform(): void {\n    this.transform = toSVG(smoothMatrix(this.transformationMatrix, 100));\n  }\n\n  /**\n   * Node was clicked\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  onClick(event: any): void {\n    this.select.emit(event);\n  }\n\n  /**\n   * Node was focused\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  onActivate(event): void {\n    if (this.activeEntries.indexOf(event) > -1) {\n      return;\n    }\n    this.activeEntries = [event, ...this.activeEntries];\n    this.activate.emit({ value: event, entries: this.activeEntries });\n  }\n\n  /**\n   * Node was defocused\n   *\n   * @memberOf GraphComponent\n   */\n  onDeactivate(event): void {\n    const idx = this.activeEntries.indexOf(event);\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: event, entries: this.activeEntries });\n  }\n\n  /**\n   * Get the domain series for the nodes\n   *\n   * @memberOf GraphComponent\n   */\n  getSeriesDomain(): any[] {\n    return this.nodes\n      .map(d => this.groupResultsBy(d))\n      .reduce((nodes: string[], node): any[] => (nodes.indexOf(node) !== -1 ? nodes : nodes.concat([node])), [])\n      .sort();\n  }\n\n  /**\n   * Tracking for the link\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  trackLinkBy(index: number, link: Edge): any {\n    return link.id;\n  }\n\n  /**\n   * Tracking for the node\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  trackNodeBy(index: number, node: Node): any {\n    return node.id;\n  }\n\n  /**\n   * Sets the colors the nodes\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.seriesDomain, this.customColors);\n  }\n\n  /**\n   * Gets the legend options\n   *\n   * @memberOf GraphComponent\n   */\n  getLegendOptions(): any {\n    return {\n      scaleType: 'ordinal',\n      domain: this.seriesDomain,\n      colors: this.colors\n    };\n  }\n\n  /**\n   * On mouse move event, used for panning and dragging.\n   *\n   * @memberOf GraphComponent\n   */\n  @HostListener('document:mousemove', ['$event'])\n  onMouseMove($event: MouseEvent): void {\n    this.isMouseMoveCalled = true;\n    if ((this.isPanning || this.isMinimapPanning) && this.panningEnabled) {\n      this.panWithConstraints(this.panningAxis, $event);\n    } else if (this.isDragging && this.draggingEnabled) {\n      this.onDrag($event);\n    }\n  }\n\n  @HostListener('document:mousedown', ['$event'])\n  onMouseDown(event: MouseEvent): void {\n    this.isMouseMoveCalled = false;\n  }\n\n  @HostListener('document:click', ['$event'])\n  graphClick(event: MouseEvent): void {\n    if (!this.isMouseMoveCalled) this.clickHandler.emit(event);\n  }\n\n  /**\n   * On touch start event to enable panning.\n   *\n   * @memberOf GraphComponent\n   */\n  onTouchStart(event: any): void {\n    this._touchLastX = event.changedTouches[0].clientX;\n    this._touchLastY = event.changedTouches[0].clientY;\n\n    this.isPanning = true;\n  }\n\n  /**\n   * On touch move event, used for panning.\n   *\n   */\n  @HostListener('document:touchmove', ['$event'])\n  onTouchMove($event: any): void {\n    if (this.isPanning && this.panningEnabled) {\n      const clientX = $event.changedTouches[0].clientX;\n      const clientY = $event.changedTouches[0].clientY;\n      const movementX = clientX - this._touchLastX;\n      const movementY = clientY - this._touchLastY;\n      this._touchLastX = clientX;\n      this._touchLastY = clientY;\n\n      this.pan(movementX, movementY);\n    }\n  }\n\n  /**\n   * On touch end event to disable panning.\n   *\n   * @memberOf GraphComponent\n   */\n  onTouchEnd(event: any) {\n    this.isPanning = false;\n  }\n\n  /**\n   * On mouse up event to disable panning/dragging.\n   *\n   * @memberOf GraphComponent\n   */\n  @HostListener('document:mouseup', ['$event'])\n  onMouseUp(event: MouseEvent): void {\n    this.isDragging = false;\n    this.isPanning = false;\n    this.isMinimapPanning = false;\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDragEnd) {\n      this.layout.onDragEnd(this.draggingNode, event);\n    }\n  }\n\n  /**\n   * On node mouse down to kick off dragging\n   *\n   * @memberOf GraphComponent\n   */\n  onNodeMouseDown(event: MouseEvent, node: any): void {\n    if (!this.draggingEnabled) {\n      return;\n    }\n    this.isDragging = true;\n    this.draggingNode = node;\n\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDragStart) {\n      this.layout.onDragStart(node, event);\n    }\n  }\n\n  /**\n   * On minimap drag mouse down to kick off minimap panning\n   *\n   * @memberOf GraphComponent\n   */\n  onMinimapDragMouseDown(): void {\n    this.isMinimapPanning = true;\n  }\n\n  /**\n   * On minimap pan event. Pans the graph to the clicked position\n   *\n   * @memberOf GraphComponent\n   */\n  onMinimapPanTo(event: MouseEvent): void {\n    let x =\n      event.offsetX - (this.dims.width - (this.graphDims.width + this.minimapOffsetX) / this.minimapScaleCoefficient);\n    let y = event.offsetY + this.minimapOffsetY / this.minimapScaleCoefficient;\n\n    this.panTo(x * this.minimapScaleCoefficient, y * this.minimapScaleCoefficient);\n    this.isMinimapPanning = true;\n  }\n\n  /**\n   * Center the graph in the viewport\n   */\n  center(): void {\n    this.panTo(this.graphDims.width / 2, this.graphDims.height / 2);\n  }\n\n  /**\n   * Zooms to fit the entier graph\n   */\n  zoomToFit(): void {\n    const heightZoom = this.dims.height / this.graphDims.height;\n    const widthZoom = this.dims.width / this.graphDims.width;\n    let zoomLevel = Math.min(heightZoom, widthZoom, 1);\n\n    if (zoomLevel < this.minZoomLevel) {\n      zoomLevel = this.minZoomLevel;\n    }\n\n    if (zoomLevel > this.maxZoomLevel) {\n      zoomLevel = this.maxZoomLevel;\n    }\n\n    if (zoomLevel !== this.zoomLevel) {\n      this.zoomLevel = zoomLevel;\n      this.updateTransform();\n      this.zoomChange.emit(this.zoomLevel);\n    }\n  }\n\n  /**\n   * Pans to the node\n   * @param nodeId\n   */\n  panToNodeId(nodeId: string): void {\n    const node = this.graph.nodes.find(n => n.id === nodeId);\n    if (!node) {\n      return;\n    }\n\n    this.panTo(node.position.x, node.position.y);\n  }\n\n  private panWithConstraints(key: string, event: MouseEvent) {\n    let x = event.movementX;\n    let y = event.movementY;\n    if (this.isMinimapPanning) {\n      x = -this.minimapScaleCoefficient * x * this.zoomLevel;\n      y = -this.minimapScaleCoefficient * y * this.zoomLevel;\n    }\n\n    switch (key) {\n      case PanningAxis.Horizontal:\n        this.pan(x, 0);\n        break;\n      case PanningAxis.Vertical:\n        this.pan(0, y);\n        break;\n      default:\n        this.pan(x, y);\n        break;\n    }\n  }\n\n  private updateMidpointOnEdge(edge: Edge, points: any): void {\n    if (!edge || !points) {\n      return;\n    }\n\n    if (points.length % 2 === 1) {\n      edge.midPoint = points[Math.floor(points.length / 2)];\n    } else {\n      const _first = points[points.length / 2];\n      const _second = points[points.length / 2 - 1];\n      edge.midPoint = {\n        x: (_first.x + _second.x) / 2,\n        y: (_first.y + _second.y) / 2\n      };\n    }\n  }\n}\n","import { Directive, Output, HostListener, EventEmitter } from '@angular/core';\n\n/**\n * Mousewheel directive\n * https://github.com/SodhanaLibrary/angular2-examples/blob/master/app/mouseWheelDirective/mousewheel.directive.ts\n *\n * @export\n */\n// tslint:disable-next-line: directive-selector\n@Directive({ selector: '[mouseWheel]' })\nexport class MouseWheelDirective {\n  @Output()\n  mouseWheelUp = new EventEmitter();\n  @Output()\n  mouseWheelDown = new EventEmitter();\n\n  @HostListener('mousewheel', ['$event'])\n  onMouseWheelChrome(event: any): void {\n    this.mouseWheelFunc(event);\n  }\n\n  @HostListener('DOMMouseScroll', ['$event'])\n  onMouseWheelFirefox(event: any): void {\n    this.mouseWheelFunc(event);\n  }\n\n  @HostListener('wheel', ['$event'])\n  onWheel(event: any): void {\n    this.mouseWheelFunc(event);\n  }\n\n  @HostListener('onmousewheel', ['$event'])\n  onMouseWheelIE(event: any): void {\n    this.mouseWheelFunc(event);\n  }\n\n  mouseWheelFunc(event: any): void {\n    if (window.event) {\n      event = window.event;\n    }\n\n    const delta: number = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail || event.deltaY || event.deltaX));\n    // Firefox don't have native support for wheel event, as a result delta values are reverse\n    const isWheelMouseUp: boolean = event.wheelDelta ? delta > 0 : delta < 0;\n    const isWheelMouseDown: boolean = event.wheelDelta ? delta < 0 : delta > 0;\n    if (isWheelMouseUp) {\n      this.mouseWheelUp.emit(event);\n    } else if (isWheelMouseDown) {\n      this.mouseWheelDown.emit(event);\n    }\n\n    // for IE\n    event.returnValue = false;\n\n    // for Chrome and Firefox\n    if (event.preventDefault) {\n      event.preventDefault();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { GraphComponent } from './graph.component';\nimport { ChartCommonModule } from '@swimlane/ngx-charts';\nimport { MouseWheelDirective } from './mouse-wheel.directive';\nimport { LayoutService } from './layouts/layout.service';\nexport { GraphComponent };\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [GraphComponent, MouseWheelDirective],\n  exports: [GraphComponent, MouseWheelDirective],\n  providers: [LayoutService]\n})\nexport class GraphModule {}\n","import { NgModule } from '@angular/core';\nimport { GraphModule } from './graph/graph.module';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\n\n@NgModule({\n  imports: [NgxChartsModule],\n  exports: [GraphModule]\n})\nexport class NgxGraphModule {}\n"]}